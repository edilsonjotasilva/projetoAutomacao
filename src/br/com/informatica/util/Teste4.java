/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.informatica.util;

import br.com.informatica.dal.Conexao;
import static br.com.informatica.util.TelaDeTestes.dataVenc;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author edilson
 */
public class Teste4 extends javax.swing.JFrame {

    PreparedStatement pst = null;
    Connection conexao = null;
    ResultSet rs = null;
    static int contVencido = 0;

    public Teste4() {
        initComponents();
        conexao = Conexao.conector;
        setarVencidos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Teste4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Teste4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Teste4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Teste4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Teste4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
 public void setarVencidos() {
        List<String> listaCodVencidos = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String sql = "select codBoleto, dataVenc, dataAtual from boleto ";
        try {
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            //    JOptionPane.showMessageDialog(null, "quantidade de linhas encontradas",linhaStr,1);
            while (rs.next()) {
                String dataVencTipoStr = rs.getString(2);
                String anoVenc = dataVencTipoStr.substring(0, 4);
                String mesVenc = dataVencTipoStr.substring(5, 7);
                String diaVenc = dataVencTipoStr.substring(8);
                String dataVencCompletaStr = diaVenc + "/" + mesVenc + "/" + anoVenc;
                //  JOptionPane.showMessageDialog(null, "Data Vencimento completa", dataVencCompletaStr, 1);

                String dataAtualTipoStr = rs.getString(3);
                String anoAtual = dataAtualTipoStr.substring(0, 4);
                String mesAtual = dataAtualTipoStr.substring(5, 7);
                String diaAtual = dataAtualTipoStr.substring(8);
                String dataAtualCompletaStr = diaAtual + "/" + mesAtual + "/" + anoAtual;
                // JOptionPane.showMessageDialog(null, "Data atual completa", dataAtualCompletaStr, 1);

                try {
                    Date dataAtualDate1 = sdf.parse(dataAtualCompletaStr);
                    Date dataVencDate1 = sdf.parse(dataVencCompletaStr);
                    long quantDias = dataAtualDate1.getTime() - dataVencDate1.getTime();
                    System.out.println("long QuantDias " + quantDias);
                    long quantDiasAtraso = TimeUnit.DAYS.convert(quantDias, TimeUnit.MILLISECONDS);

                    if (quantDiasAtraso > 0) {
                        String codBoletoVenc = rs.getString(1);
                        listaCodVencidos.add(codBoletoVenc);
                        //  JOptionPane.showMessageDialog(null, "Codigo do boleto ",codBoleto,1);

                        contVencido++;
                        //    JOptionPane.showMessageDialog(null, "Atrasado ");
                        //    System.out.println("Dias de atraso: " + quantDiasAtraso);
                        for (String vencido : listaCodVencidos) {
                            try {
                                String sqlBoleto = "UPDATE boleto set status = 'VENCIDO' where codBoleto = ?";
                                pst = conexao.prepareStatement(sqlBoleto);
                                pst.setString(1, vencido);
                                pst.executeUpdate();
                            } catch (SQLException ex) {
                                Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                } catch (ParseException ex) {
                    Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
        }
        String contVencidoStr = String.valueOf(contVencido);
        System.out.println("Quantidade de vencidos: " + contVencido);
        //    JOptionPane.showMessageDialog(null, "Qauntidade de vencidos", contVencidoStr, 1);
        contVencido = 0;

        setarEmAberto();
    }

    private void setarEmAberto() {
        List<String> listaCodEmAberto = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String sql = "select codBoleto, dataVenc, dataAtual from boleto ";
        try {
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            //    JOptionPane.showMessageDialog(null, "quantidade de linhas encontradas",linhaStr,1);
            while (rs.next()) {
                int linha = rs.getRow();
                String linhaStr = String.valueOf(linha);
                //  System.out.println("quantidade linha encontrada " + linha);
                //  JOptionPane.showMessageDialog(null, "quantidade de linhas encontradas", linhaStr, 1);
                String dataVencTipoStr = rs.getString(2);
                String anoVenc = dataVencTipoStr.substring(0, 4);
                String mesVenc = dataVencTipoStr.substring(5, 7);
                String diaVenc = dataVencTipoStr.substring(8);
                String dataVencCompletaStr = diaVenc + "/" + mesVenc + "/" + anoVenc;

                String dataAtualTipoStr = rs.getString(3);
                String anoAtual = dataAtualTipoStr.substring(0, 4);
                String mesAtual = dataAtualTipoStr.substring(5, 7);
                String diaAtual = dataAtualTipoStr.substring(8);
                String dataAtualCompletaStr = diaAtual + "/" + mesAtual + "/" + anoAtual;

                try {
                    Date dataAtualDate1 = sdf.parse(dataAtualCompletaStr);
                    Date dataVencDate1 = sdf.parse(dataVencCompletaStr);
                    long quantDias1 = dataAtualDate1.getTime() - dataVencDate1.getTime();
                    System.out.println("long QuantDias " + quantDias1);
                    long quantDiasAtraso2 = TimeUnit.DAYS.convert(quantDias1, TimeUnit.MILLISECONDS);

                    if (quantDiasAtraso2 <= 0) {
                        String codBoletoAberto = rs.getString(1);
                        listaCodEmAberto.add(codBoletoAberto);
                        //      JOptionPane.showMessageDialog(null, "Codigo do boleto ",codBoletoAberto,1);
                        contVencido++;
                        //    JOptionPane.showMessageDialog(null, "Atrasado ");
                        //    System.out.println("Dias de atraso: " + quantDiasAtraso2);
                        for (String aberto : listaCodEmAberto) {
                            try {
                                String sqlBoleto = "UPDATE boleto set status = 'EM ABERTO' where codBoleto = ?";
                                pst = conexao.prepareStatement(sqlBoleto);
                                pst.setString(1, aberto);
                                pst.executeUpdate();
                            } catch (SQLException ex) {
                                Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                } catch (ParseException ex) {
                    Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Teste4.class.getName()).log(Level.SEVERE, null, ex);
        }
        String contVencidoStr = String.valueOf(contVencido);
        System.out.println("Quantidade de vencidos: " + contVencido);
        //    JOptionPane.showMessageDialog(null, "Qauntidade de vencidos", contVencidoStr, 1);
        contVencido = 0;

    }
}
