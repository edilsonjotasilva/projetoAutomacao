/*
essa classe armazena na lista :listaAgenda, todos os resultado do select na tabela agendacompromisso
do banco de dados.
essa classe faz inserção , alteração cancelamento e pesquisa na tabela agendacompromisso
 */
package br.com.informatica.telas;

import br.com.informatica.dal.Conexao;

import static br.com.informatica.telas.TelaSaida.pst;
import static br.com.informatica.telas.TelaSaida.rs;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.paint.Color;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.codehaus.groovy.tools.shell.util.SimpleCompletor;

/**
 *
 * @author edilson
 */
public class TelaNewAgenda extends javax.swing.JFrame {

    static PreparedStatement pst = null;
    static ResultSet rs = null;
    Connection conexao = null;

    public TelaNewAgenda() {
          try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaNewAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaNewAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaNewAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaNewAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        Date data = new Date();
        SimpleDateFormat sdf  = new SimpleDateFormat("ddMMyyyy");
        String dataAtual = sdf.format(data);
        initComponents();
        txtDataAgenda.setText(dataAtual);
        lblEstiloData.setText("Formato Data: Ex.: "+dataAtual);
        conexao = Conexao.conector;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisaAgenda = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAgendaCompromisso = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCodigoAgenda = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtValorAgenda = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDataAgenda = new javax.swing.JTextField();
        txtDescricaoAgenda = new javax.swing.JTextField();
        cboSituacaoAgenda = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnCancelarAgenda = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnVerificar = new javax.swing.JButton();
        btnAlterarAgenda = new javax.swing.JButton();
        btnAgendar = new javax.swing.JButton();
        btnLimparAgenda = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblEstiloData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 240, 240));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("pesquisa Agenda");

        txtPesquisaAgenda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaAgendaKeyReleased(evt);
            }
        });

        tblAgendaCompromisso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cod Agenda", "Descricao", "Valor", "Data", "Situacao"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAgendaCompromisso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAgendaCompromissoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAgendaCompromisso);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 20)); // NOI18N
        jLabel2.setText("Agenda de Compromissos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(45, 45, 45)
                                .addComponent(txtPesquisaAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(jLabel2)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPesquisaAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel5.setText("Valor");

        jLabel6.setText("Data");

        jLabel7.setText("Situacao");

        jLabel8.setText("Agendar");

        txtCodigoAgenda.setToolTipText("Esse Código Geral Automaticamente");
        txtCodigoAgenda.setEnabled(false);

        jLabel9.setText("Alterar");

        txtValorAgenda.setText("0.00");

        jLabel10.setText("Cancelar");

        cboSituacaoAgenda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AGENDADO\t", "ADIADO", "VENCIDO", "VENCENDO", "REALIZADO", "CANCELADO" }));

        jPanel2.setBackground(new java.awt.Color(204, 240, 240));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        btnCancelarAgenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/informatica/icones/cancelar.png"))); // NOI18N
        btnCancelarAgenda.setEnabled(false);
        jPanel2.add(btnCancelarAgenda);

        jLabel3.setText("Codigo");

        jLabel4.setText("Descricao");

        btnVerificar.setBackground(new java.awt.Color(204, 204, 240));
        btnVerificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/informatica/icones/verificar.png"))); // NOI18N
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarActionPerformed(evt);
            }
        });

        btnAlterarAgenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/informatica/icones/adiar.png"))); // NOI18N
        btnAlterarAgenda.setEnabled(false);
        btnAlterarAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarAgendaActionPerformed(evt);
            }
        });

        btnAgendar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/informatica/icones/agendar.png"))); // NOI18N
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        btnLimparAgenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/informatica/icones/clear.png"))); // NOI18N
        btnLimparAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparAgendaActionPerformed(evt);
            }
        });

        jLabel11.setText("Limpar");

        jLabel12.setText("Verificar");

        lblEstiloData.setForeground(new java.awt.Color(255, 0, 102));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(27, 27, 27)
                                        .addComponent(txtDataAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(lblEstiloData))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(50, 50, 50)
                                            .addComponent(btnAgendar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnAlterarAgenda)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnLimparAgenda)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(76, 76, 76)
                                            .addComponent(btnVerificar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel5))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtCodigoAgenda)
                                                .addComponent(txtValorAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(69, 69, 69)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(26, 26, 26)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtDescricaoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cboSituacaoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel8)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel9)
                        .addGap(75, 75, 75)
                        .addComponent(jLabel11)
                        .addGap(70, 70, 70)
                        .addComponent(jLabel10)
                        .addGap(117, 117, 117)
                        .addComponent(jLabel12)))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtCodigoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescricaoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtValorAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cboSituacaoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDataAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstiloData))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAlterarAgenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimparAgenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnVerificar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel12)))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPesquisaAgendaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaAgendaKeyReleased
        pesquisaAgenda();
    }//GEN-LAST:event_txtPesquisaAgendaKeyReleased

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed

        inserirAgenda();
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void btnAlterarAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarAgendaActionPerformed
        alterarAgendaCompromisso();

    }//GEN-LAST:event_btnAlterarAgendaActionPerformed

    private void tblAgendaCompromissoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAgendaCompromissoMouseClicked
        btnAgendar.setEnabled(false);
        btnAlterarAgenda.setEnabled(true);
        btnCancelarAgenda.setEnabled(true);
        btnLimparAgenda.setEnabled(true);
        setarCamposAgenda();
    }//GEN-LAST:event_tblAgendaCompromissoMouseClicked

    private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarActionPerformed
        verificaAgenda();
    }//GEN-LAST:event_btnVerificarActionPerformed

    private void btnLimparAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparAgendaActionPerformed
        Date data = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
        String dataAtual = sdf.format(data);
        txtDataAgenda.setText(dataAtual);
        txtDescricaoAgenda.setText(null);
        txtCodigoAgenda.setText(null);
        btnAgendar.setEnabled(true);
        btnAlterarAgenda.setEnabled(false);
         lblEstiloData.setText("Formato Data: Ex.: "+dataAtual);
        
    }//GEN-LAST:event_btnLimparAgendaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
      
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaNewAgenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnAlterarAgenda;
    private javax.swing.JButton btnCancelarAgenda;
    private javax.swing.JButton btnLimparAgenda;
    private javax.swing.JButton btnVerificar;
    private javax.swing.JComboBox<String> cboSituacaoAgenda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEstiloData;
    private javax.swing.JTable tblAgendaCompromisso;
    private javax.swing.JTextField txtCodigoAgenda;
    private javax.swing.JTextField txtDataAgenda;
    private javax.swing.JTextField txtDescricaoAgenda;
    private javax.swing.JTextField txtPesquisaAgenda;
    private javax.swing.JTextField txtValorAgenda;
    // End of variables declaration//GEN-END:variables
//preenche o Jtable tblAgendaCompromisso com os os valores retornados do comando SQL na tabela agendacompromisso
    private void pesquisaAgenda() {
        String sql = "SELECT * FROM agendacompromisso WHERE situacaoAgenda LIKE ? ORDER BY dataAgenda";
        try {
            pst = conexao.prepareStatement(sql);
            pst.setString(1, "%" + txtPesquisaAgenda.getText() + "%");
            rs = pst.executeQuery();
            tblAgendaCompromisso.setModel(DbUtils.resultSetToTableModel(rs));
            tblAgendaCompromisso.isValid();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void inserirAgenda() {
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma o Agendamento? ", "Atenção", JOptionPane.YES_NO_OPTION);
        //se confirmar for = YES_OPTION, o comando sql será executado, se txtUsuNom.getText(),
        //for Empty significa que não ha usuario com esse ID
        if (confirma == JOptionPane.YES_OPTION) {
            try {

                Date anoCorrente = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
                String dataFormatadaAtual = sdf.format(anoCorrente);
                String sql = "INSERT INTO agendacompromisso (descAgenda,valorAgenda,dataAgenda,situacaoAgenda) VALUES (?, ?, ?, ?)";

                pst = conexao.prepareStatement(sql);//---- 13091968
                //pega o dia que está no campo txtDAtaSaida
                String dia = txtDataAgenda.getText().substring(0, 2);
                //pega o dia atual
                String diaAtual = dataFormatadaAtual.substring(0, 2);
                String mes = txtDataAgenda.getText().substring(2, 4);
                String mesAtual = dataFormatadaAtual.substring(2, 4);
                String ano = txtDataAgenda.getText().substring(4);
                String anoAtual = dataFormatadaAtual.substring(4);
                if (Integer.parseInt(ano) != Integer.parseInt(anoAtual) || Integer.parseInt(mes) != Integer.parseInt(mesAtual)) {
                    int confirmaData = JOptionPane.showConfirmDialog(null, "Ano/Mes digitado DIFERE do Ano/Mes Atual, deseja inserir assim mesmo ? ", "Atenção", JOptionPane.YES_NO_OPTION);
                    if (confirmaData == JOptionPane.YES_OPTION) {
                        //inseri a data no formato do MYSQL
                        String dataMysql = ano + mes + dia;
                        pst.setString(1, txtDescricaoAgenda.getText());
                        pst.setString(2, txtValorAgenda.getText());
                        pst.setString(3, dataMysql);
                        pst.setString(4, cboSituacaoAgenda.getSelectedItem().toString());
                        // validaçao dos campos obrigatórios
                        if (txtDescricaoAgenda.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Campo Descrição é Obrigatório!");
                        } else if (txtDataAgenda.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Campo Data  é Obrigatório!");
                        } else if (txtValorAgenda.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Campo Valor não pode ser vazio, sem não tem VALOR, COLOQUE ZERO - (0)");
                        } else {
                            int rowsAfected = pst.executeUpdate();

                            if (rowsAfected > 0) {
                                JOptionPane.showMessageDialog(null, "Agendamento Cadastrado com sucesso!", "Agenda", 1);
                                txtCodigoAgenda.setText(null);
                                txtDescricaoAgenda.setText(null);
                                txtValorAgenda.setText(null);
                                txtDataAgenda.setText(null);

                            }
                        }
                    }
                } else {
                    String dataMysql = ano + "-" + mes + "-" + dia;
                    pst.setString(1, txtDescricaoAgenda.getText());
                    pst.setString(2, txtValorAgenda.getText());
                    pst.setString(3, dataMysql);
                    pst.setString(4, cboSituacaoAgenda.getSelectedItem().toString());
                    // validaçao dos campos obrigatórios
                    if (txtDescricaoAgenda.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Campo Descrição é Obrigatório!");
                    } else if (txtDataAgenda.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Campo Data  é Obrigatório!");
                    } else {
                        int rowsAfected = pst.executeUpdate();

                        if (rowsAfected > 0) {
                            JOptionPane.showMessageDialog(null, "Agendamento cadastrado com sucesso!", "Agenda", 1);
                            txtCodigoAgenda.setText(null);
                            txtDescricaoAgenda.setText(null);
                            txtValorAgenda.setText(null);
                            txtDataAgenda.setText(null);

                        }
                    }
                }
            } catch (Exception e) {
            }

        }

    }

    private void setarCamposAgenda() {
        int setar = tblAgendaCompromisso.getSelectedRow();
        txtCodigoAgenda.setText(tblAgendaCompromisso.getModel().getValueAt(setar, 0).toString());
        txtDescricaoAgenda.setText(tblAgendaCompromisso.getModel().getValueAt(setar, 1).toString());
        txtValorAgenda.setText(tblAgendaCompromisso.getModel().getValueAt(setar, 2).toString());
        txtDataAgenda.setText(tblAgendaCompromisso.getModel().getValueAt(setar, 3).toString());
        cboSituacaoAgenda.setSelectedItem(tblAgendaCompromisso.getModel().getValueAt(setar, 4).toString());
       // lblEstiloData.setText("<html><font color=orange><b>Formato Data: Ex.: 2019-01-10");
        lblEstiloData.setText("<html><font color=orange><b>Formato Data: Ex.: "+tblAgendaCompromisso.getModel().getValueAt(setar, 3).toString() );

        txtPesquisaAgenda.requestFocus();
    }

    private void alterarAgendaCompromisso() {
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma o Adiamento da Agenda? ", "Atenção", JOptionPane.YES_NO_OPTION);
        //se confirmar for = YES_OPTION, o comando sql será executado, se txtUsuNom.getText(),
        //for Empty significa que não ha usuario com esse ID
        if (confirma == JOptionPane.YES_OPTION) {
            Date anoCorrente = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
            String dataFormatadaAtual = sdf.format(anoCorrente);
            String sql = "update agendacompromisso set descAgenda=?,valorAgenda=?,dataAgenda=?,situacaoAgenda=? where codAgenda=?";
            try {
                pst = conexao.prepareStatement(sql);//---- 13091968
                pst.setString(1, txtDescricaoAgenda.getText());
                pst.setString(2, txtValorAgenda.getText());
                pst.setString(3, txtDataAgenda.getText());
                pst.setString(4, cboSituacaoAgenda.getSelectedItem().toString());
                pst.setString(5, txtCodigoAgenda.getText());

                // validaçao dos campos obrigatórios
                if (txtDescricaoAgenda.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Campo Descrição é Obrigatório!");
                } else if (txtDataAgenda.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Campo Data Agenda  é Obrigatório!");
                } else if (txtValorAgenda.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Campo Valor não pode ser vazio, sem não tem VALOR, COLOQUE ZERO - (0)");
                } else {
                    int rowsAfected = pst.executeUpdate();

                    if (rowsAfected > 0) {
                        JOptionPane.showMessageDialog(null, "Agendamento Alterado com sucesso!", "Agenda", 1);
                        txtCodigoAgenda.setText(null);
                        txtDescricaoAgenda.setText(null);
                        txtValorAgenda.setText(null);
                        txtValorAgenda.setText("0.00");
                        btnAgendar.setEnabled(true);
                        btnAlterarAgenda.setEnabled(false);
                        btnLimparAgenda.setEnabled(false);

                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void verificaAgenda() {
        boolean verificado = true;
        Date dataAtual = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
        String dataFormatadaAtual = sdf.format(dataAtual);
        //Extraindo a data atual do sistema e armazenando em variaveis diferentes
        Integer dia = Integer.parseInt(dataFormatadaAtual.substring(0, 2));
        Integer mes = Integer.parseInt(dataFormatadaAtual.substring(2, 4));
        Integer ano = Integer.parseInt(dataFormatadaAtual.substring(4));

        List<Agenda> listaAgenda = new ArrayList<>();
        String sql = "SELECT * FROM agendacompromisso";
        try {
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
//setando as variaveis do objeto agenda com os campos extriado da tabela agendacompromisso através do cmando sql;
            while (rs.next()) {
                Agenda agenda = new Agenda();
                agenda.setCodAgenda(rs.getInt(1));
                agenda.setDescAgenda(rs.getString(2));
                agenda.setValorAgenda(rs.getDouble(3));
                agenda.setDataAgenda(rs.getDate(4));
                agenda.setSituacaoAgenda(rs.getString(5));
                //apos setar o objeto agenda como todos os campos da tabela agendacompromisso,o objeto agenda e adicionado a listaAgenda
                listaAgenda.add(agenda);
            }
            //for exibe através da agendaCompleta cada objeto do tipo agenda que foi criado
            for (Agenda agendaCompleta : listaAgenda) {//2019-07-21
                System.out.println("Agendas : " + agendaCompleta.toString());
                //extraindo a data completa do objeto List:agendaCompleta e armazenando em uma variavel do tipo String
                String dataExtraida = (agendaCompleta.dataAgenda.toString());
                //extraindo o ano do objeto List:agendaCompleta e armazenando em uma variavel do tipo int
                int anoExtraido = Integer.parseInt(dataExtraida.substring(0, 4));
                System.out.println("ano extraido:: " + anoExtraido);
                System.out.println("Ano Atual :" + ano);
                int mesExtraido = Integer.parseInt(dataExtraida.substring(5, 7));
                System.out.println("Mes extraido:: " + mesExtraido);
                System.out.println("Mes Atual : " + mes);
                int diaExtraido = Integer.parseInt(dataExtraida.substring(8));
                System.out.println("Dia extraido:: " + diaExtraido);
                System.out.println("Dia Atual : " + dia);
                System.out.println("Data Extraida : " + dataExtraida);
                System.out.println("Data Atual : " + dataFormatadaAtual);
            }
            for (Agenda agendaCompleta : listaAgenda) {
                //setando os campos da TelaNewAgenda com os campos extraidos da List: agendaCompleta
                txtCodigoAgenda.setText(String.valueOf(agendaCompleta.codAgenda));
                txtDescricaoAgenda.setText(agendaCompleta.descAgenda);
                txtDataAgenda.setText(agendaCompleta.dataAgenda.toString());
                cboSituacaoAgenda.setSelectedItem(agendaCompleta.situacaoAgenda);

                String dataExtraida = (agendaCompleta.dataAgenda.toString());
                int anoExtraido = Integer.parseInt(dataExtraida.substring(0, 4));
                int mesExtraido = Integer.parseInt(dataExtraida.substring(5, 7));
                int diaExtraido = Integer.parseInt(dataExtraida.substring(8));
                //abaixo o codigo html muda a cor do texto conform situação
                //os ifS abaixao verifica se os compromissos estão vencendo ou situacaos, exceto se estiverem setados como REALIZADO OU CANCELADO
                if (diaExtraido < dia && mesExtraido <= mes && anoExtraido <= ano && ((!cboSituacaoAgenda.getSelectedItem().equals("REALIZADO")) && (!cboSituacaoAgenda.getSelectedItem().equals("CANCELADO")))) {
                    JOptionPane.showMessageDialog(null, "<html><font color=red >Compromisso VENCIDO : <html><font color=black ><b>".concat(txtDescricaoAgenda.getText()).concat(" - ").concat(txtDataAgenda.getText()));
                    int codAgenda = agendaCompleta.codAgenda;
                    //chamar o metodo atualizaAgenda passando o parametro "situacao"
                    atualizarAgenda("VENCIDO", codAgenda);

                }
                if (diaExtraido == dia && mesExtraido == mes && anoExtraido == ano && ((!cboSituacaoAgenda.getSelectedItem().equals("REALIZADO")) && (!cboSituacaoAgenda.getSelectedItem().equals("CANCELADO")))) {
                    JOptionPane.showMessageDialog(null, "<html><font color=orange ><b>Compromisso VENCE HOJE!! : <html><font color=black ><b>" + (txtDescricaoAgenda.getText())
                            + " - " + txtDataAgenda.getText());
                    int codAgenda = agendaCompleta.codAgenda;
                    //chamar o metodo atualizaAgenda passando o parametro "VENCENDO"
                    atualizarAgenda("VENCENDO", codAgenda);
                }
                if ((diaExtraido - 1) == dia && mesExtraido == mes && anoExtraido == ano && ((!cboSituacaoAgenda.getSelectedItem().equals("REALIZADO")) && (!cboSituacaoAgenda.getSelectedItem().equals("CANCELADO")))) {
                    JOptionPane.showMessageDialog(null, "<html><font color=blue ><b>Compromisso VENCENDO AMANHÃ!! : <html><font color=black ><b>" + txtDescricaoAgenda.getText()
                            + " - " + txtDataAgenda.getText());
                    int codAgenda = agendaCompleta.codAgenda;
                    //chamar o metodo atualizaAgenda passando o parametro "VENCENDO", FALTANDO ainda um dia"
                    atualizarAgenda("VENCENDO", codAgenda);
                }

            }

        } catch (Exception e) {
        }
    }
//substitui a variavel situacao pelo parametro passado no metodo acima: 

    private void atualizarAgenda(String situacao, int codAg) {
        String sit = situacao;
        int codAgenda = codAg;
        String sql = "UPDATE agendacompromisso SET situacaoAgenda=? WHERE codAgenda=?";
        try {
            pst = conexao.prepareStatement(sql);
            pst.setString(1, situacao);
            pst.setInt(2, codAgenda);
            pst.executeUpdate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

}
